ARG PYTHON_VERSION=3.12
FROM python:${PYTHON_VERSION}-slim as python-base

env VENV_PATH="/venv" \
    APP_PATH="/app" \
    PYTHONFAULTHANDLER=1 \
    PYTHONHASHSEED=random \
    PYTHONUNBUFFERED=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=1 \
    POETRY_HOME="/opt/poetry" \
    POETRY_NO_INTERACTION=true \
    POETRY_VIRTUALENVS_CREATE=false \
    POETRY_WARNINGS_EXPORT=false

# Install only runtime dependencies
RUN apt-get update; \
  apt-get install -y --no-install-recommends \
  ffmpeg \
  python3 \
  python3-grpcio

# prepend poetry and venv to path
ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"

WORKDIR $APP_PATH

FROM python-base as builder


# python3-virtualenv is needed to use --system-site-packages with the debian-specific dist-packages directory.
# See https://stackoverflow.com/a/31658822
RUN apt-get update; \
  apt-get install -y --no-install-recommends \
  python3-virtualenv \
  python3-pip-whl \
  curl

# Install Poetry, respects $POETRY_HOME
RUN curl -sSL https://install.python-poetry.org | python3 -

# Copy dependencies
COPY ./poetry.lock ./pyproject.toml ./

# Install runtime dependencies
# Using poetry export and pip install because poetry won't pick up the system-installed packages
# poetry install --dry-run, despite its name, actually installs poetry plugins defined in pyproject.toml.
# Ref: https://github.com/python-poetry/poetry/issues/9990
RUN poetry install --dry-run; poetry export --no-cache --only server > requirements.txt
RUN virtualenv $VENV_PATH --system-site-packages --copies
RUN python3 -c 'import sys, platform; print("sys:", sys.platform, "\nmachine:", platform.machine())'
RUN . $VENV_PATH/bin/activate; python3 -m pip install -r requirements.txt --extra-index-url https://download.pytorch.org/whl/cpu

FROM python-base as final

COPY --from=builder $VENV_PATH $VENV_PATH
COPY models ./models
COPY utils ./utils
COPY *.py ./

CMD $VENV_PATH/bin/python3 ./engine.py
EXPOSE 8124
